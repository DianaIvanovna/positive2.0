{
	"parser": "babel-eslint",
	"settings": {
		"react": {
			"version": "detect"
		}
	},
    "env": {
        "browser": true,
        "es2021": true,
		"node": true,
		"mocha": true
    },
    "extends": [
        "eslint:recommended",
        "react-app",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:prettier/recommended",
        "prettier"
    ],
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 12,
        "sourceType": "module"
    },
    "plugins": [
        "react",
        "prettier"
    ],
    "rules": {
        "accessor-pairs": "warn",    //enforce getter and setter pairs in objects and classes",
        "array-callback-return": "warn",    //enforce `return` statements in callbacks of array methods",
        "arrow-spacing": "warn",    //enforce consistent spacing before and after the arrow in arrow functions",
        "class-methods-use-this": "off",    //enforce that class methods utilize `this`",
        "consistent-return": "warn",    //require `return` statements to either always or never specify values",
        "constructor-super": "warn",    //require `super()` calls in constructors",
        "curly": "warn",    //enforce consistent brace style for all control statements",
        "default-case": "warn",    //require `default` cases in `switch` statements",
        "default-case-last": "warn",    //enforce default clauses in switch statements to be last",
        "dot-notation": "warn",    //enforce dot notation whenever possible",
        "eqeqeq": "warn",    //require the use of `===` and `!==`",
        "for-direction": "warn",    //enforce &amp;quot;for&amp;quot; loop update clause moving the counter in the right direction.",
        "max-classes-per-file": "warn",    //enforce a maximum number of classes per file",
        "max-depth": "warn", //enforce a maximum depth that blocks can be nested
        "max-len": ["warn", {"code": 200,
            "tabWidth": 4,
            "ignoreUrls": true,
            "ignoreStrings":true
            }],    //enforce a maximum line length
        "max-lines": ["warn", 500],    //enforce a maximum number of lines per file
        "max-lines-per-function": ["warn", 500],    //enforce a maximum number of lines of code in a function
        "max-nested-callbacks": ["warn", 3],    //enforce a maximum depth that callbacks can be nested",
        "max-params": ["warn", 10],     //enforce a maximum number of parameters in function definitions
        "max-statements-per-line": "warn",    //enforce a maximum number of statements allowed per line",
        "no-alert": "warn",    //disallow the use of `alert`,`confirm` and `prompt`",
        "no-array-constructor": "off",    //disallow `Array` constructors",
        "no-async-promise-executor": "warn",    //disallow using an async function as a Promise executor",
        "no-await-in-loop": "warn",    //disallow `await` inside of loops",
        "no-bitwise": "warn",    //disallow bitwise operators",
        "no-caller": "warn",    //disallow the use of `arguments.caller` or `arguments.callee`",
        "no-case-declarations": "warn",    //disallow lexical declarations in case clauses",
        "no-class-assign": "warn",    //disallow reassigning class members",
        "no-cond-assign": "warn",    //disallow assignment operators in conditional expressions",
        "no-confusing-arrow": "warn",    //disallow arrow functions where they could be confused with comparisons",
        "no-console": "warn",    //disallow the use of `console`",
        "no-const-assign": "warn",    //disallow reassigning `const` variables",
        "no-constant-condition": "warn",    //disallow constant expressions in conditions",
        "no-constructor-return": "warn",    //disallow returning value from constructor",
        "no-continue": "warn",    //disallow `continue` statements",
        "no-control-regex": "warn",    //disallow control characters in regular expressions",
        "no-debugger": "warn",    //disallow the use of `debugger`",
        "no-div-regex": "warn",    //disallow division operators explicitly at the beginning of regular expressions",
        "no-dupe-args": "warn",    //disallow duplicate arguments in `function` definitions",
        "no-dupe-class-members": "warn",    //disallow duplicate class members",
        "no-dupe-else-if": "warn",    //disallow duplicate conditions in if-else-if chains",
        "no-dupe-keys": "warn",    //disallow duplicate keys in object literals",
        "no-duplicate-case": "warn",    //disallow duplicate case labels",
        "no-duplicate-imports": "warn",    //disallow duplicate module imports",
        "no-else-return": "warn",    //disallow `else` blocks after `return` statements in `if` statements",
        "no-empty": "warn",    //disallow empty block statements",
        "no-empty-character-class": "warn",    //no-empty-character-class",
        "no-empty-pattern": "warn",    //disallow empty destructuring patterns",
        "no-empty-function": "off",
        "no-eq-null": "warn",    //disallow `null` comparisons without type-checking operators",
        "no-eval": "warn",    //disallow the use of `eval()`",
        "no-ex-assign": "warn",    //disallow reassigning exceptions in `catch` clauses",
        "no-extend-native": "warn",    //disallow extending native types",
        "no-extra-bind": "warn",    //disallow unnecessary calls to `.bind()`",
        "no-extra-boolean-cast": "warn",    //disallow unnecessary boolean casts",
        "no-extra-semi": "off",    //disallow unnecessary semicolons",
        "no-fallthrough": "warn",    //disallow fallthrough of `case` statements",
        "no-floating-decimal": "warn",    //disallow leading or trailing decimal points in numeric literals",
        "no-func-assign": "warn",    //disallow reassigning `function` declarations",
        "no-global-assign": "warn",    //no-global-assign",
        "no-implicit-globals": "warn",    //disallow declarations in the global scope",
        "no-implied-eval": "off",    //disallow the use of `eval()`-like methods",
        "no-import-assign": "warn",    //disallow assigning to imported bindings",
        "no-inline-comments": "warn",    //disallow inline comments after code",
        "no-inner-declarations": "warn",    //disallow variable or `function` declarations in nested blocks",
        "no-invalid-regexp": "warn",    //disallow invalid regular expression strings in `RegExp` constructors",
        "no-invalid-this": "warn",    //disallow `this` keywords outside of classes or class-like objects",
        "no-irregular-whitespace": "warn",    //disallow irregular whitespace",
        "no-iterator": "warn",    //disallow the use of the `__iterator__` property",
        "no-labels": "warn",    //no-labels",
        "no-lone-blocks": "warn",    //disallow unnecessary nested blocks",
        "no-lonely-if": "warn",    //disallow `if` statements as the only statement in `else` blocks",
        "no-loop-func": "warn",    //disallow function declarations that contain unsafe references inside loop statements",
        "no-loss-of-precision": "warn",    //disallow literal numbers that lose precision",
        "no-misleading-character-class": "warn",    //disallow characters which are made with multiple code points in character class syntax",
        "no-mixed-operators": "warn",    //disallow mixed binary operators",
        "no-multi-assign": "warn",    //disallow use of chained assignment expressions",
        "no-multi-spaces": "warn",    //disallow multiple spaces",
        "no-multi-str": "warn",    //disallow multiline strings",
        "no-multiple-empty-lines": "warn",    //disallow multiple empty lines",
        "no-negated-condition": "warn",    //disallow negated conditions",
        "no-nested-ternary": "warn",    //disallow nested ternary expressions",
        "no-new": "warn",    //disallow `new` operators outside of assignments or comparisons",
        "no-new-func": "warn",    //disallow `new` operators with the `Function` object",
        "no-new-object": "warn",    //disallow `Object` constructors",
        "no-new-symbol": "warn",    //disallow `new` operators with the `Symbol` object",
        "no-new-wrappers": "warn",    //disallow `new` operators with the `String`,`Number`,and `Boolean` objects",
        "no-nonoctal-decimal-escape": "warn",    //disallow `8` and `9` escape sequences in string literals",
        "no-obj-calls": "warn",    //disallow calling global object properties as functions",
        "no-octal": "warn",    //disallow octal literals",
        "no-octal-escape": "warn",    //disallow octal escape sequences in string literals",
        "no-param-reassign": "warn",    //disallow reassigning `function` parameters",
        "no-promise-executor-return": "warn",    //disallow returning values from Promise executor functions",
        "no-proto": "warn",    //disallow the use of the `__proto__` property",
        "no-prototype-builtins": "warn",    //disallow calling some `Object.prototype` methods directly on objects",
        "no-redeclare": "warn",    //disallow variable redeclaration",
        "no-regex-spaces": "warn",    //disallow multiple spaces in regular expressions",
        "no-return-assign": "warn",    //disallow assignment operators in `return` statements",
        "no-return-await": "warn",    //disallow unnecessary `return await`",
        "no-script-url": "warn",    //disallow `javascript:` urls",
        "no-self-assign": "warn",    //disallow assignments where both sides are exactly the same",
        "no-self-compare": "warn",    //disallow comparisons where both sides are exactly the same",
        "no-sequences": "warn",    //disallow comma operators",
        "no-setter-return": "warn",    //disallow returning values from setters",
        "no-shadow-restricted-names": "warn",    //disallow identifiers from shadowing restricted names",
        "no-sparse-arrays": "warn",    //disallow sparse arrays",
        "no-template-curly-in-string": "warn",    //disallow template literal placeholder syntax in regular strings",
        "no-this-before-super": "warn",    //disallow `this`/`super` before calling `super()` in constructors",
        "no-throw-literal": "warn",    //disallow throwing literals as exceptions",
        "no-undef": "warn",    //disallow the use of undeclared variables unless mentioned in `global ` comments",
        "no-underscore-dangle": "warn",    //disallow dangling underscores in identifiers",
        "no-unexpected-multiline": "warn",    //disallow confusing multiline expressions",
        "no-unneeded-ternary": "warn",    //disallow ternary operators when simpler alternatives exist",
        "no-unreachable": "warn",    //disallow unreachable code after `return`,`throw`,`continue`,and `break` statements",
        "no-unreachable-loop": "warn",    //disallow loops with a body that allows only one iteration",
        "no-unsafe-finally": "warn",    //disallow control flow statements in `finally` blocks",
        "no-unsafe-negation": "warn",    //no-unsafe-negation",
        "no-unsafe-optional-chaining": "warn",    //disallow use of optional chaining in contexts where the `undefined` value is not allowed",
        "no-unused-expressions": "warn",    //disallow unused expressions",
        "no-unused-vars": "warn",
        "no-useless-backreference": "warn",    //disallow useless backreferences in regular expressions",
        "no-useless-call": "warn",    //disallow unnecessary calls to `.call()` and `.apply()`",
        "no-useless-catch": "warn",    //disallow unnecessary `catch` clauses",
        "no-useless-computed-key": "warn",    //disallow unnecessary computed property keys in objects and classes",
        "no-useless-concat": "warn",    //disallow unnecessary concatenation of literals or template literals",
        "no-useless-constructor": "warn",    //disallow unnecessary constructors",
        "no-useless-escape": "warn",    //disallow unnecessary escape characters",
        "no-useless-rename": "warn",    //disallow renaming import,export,and destructured assignments to the same name",
        "no-useless-return": "warn",    //disallow redundant return statements",
        "no-var": "warn",    //require `let` or `const` instead of `var`",
        "nonblock-statement-body-position": ["warn", "below"],   //enforce the location of single-line statements
        "no-whitespace-before-property": "warn",    //disallow whitespace before properties",
        "no-with": "warn",    //disallow `with` statements",
        "object-shorthand": "warn",    //require or disallow method and property shorthand syntax for object literals",
        "padding-line-between-statements": [
            "warn", 
            // Always require blank lines after directive (like "use-strict"), except between directives
            {"blankLine": "always", "prev": "directive", "next": "*"},
            {"blankLine": "any",    "prev": "directive", "next": "directive"},
            // Always require blank lines after import, except between imports
            {"blankLine": "always", "prev": "import", "next": "*"},
            {"blankLine": "any",    "prev": "import", "next": "import"},
            // Always require blank lines before and after every sequence of variable declarations and export
            {"blankLine": "always", "prev": "*", "next": ["const", "let", "var", "export"]},
            {"blankLine": "always", "prev": ["const", "let", "var", "export"], "next": "*"},
            {"blankLine": "any",    "prev": ["const", "let", "var", "export"], "next": ["const", "let", "var", "export"]},
            // Always require blank lines before and after class declaration, if, do/while, switch, try
            {"blankLine": "always", "prev": "*", "next": ["if", "class", "for", "do", "while", "switch", "try", "function"]},
            {"blankLine": "always", "prev": ["if", "class", "for", "do", "while", "switch", "try", "function"], "next": "*"},
            // Always require blank lines before return statements
            {"blankLine": "always", "prev": "*", "next": ["return","break"]}
        ],    //padding-line-between-statements
        "prefer-arrow-callback": "warn",    //require using arrow functions for callbacks",
        "prefer-const": "warn",    //require `const` declarations for variables that are never reassigned after declared",
        "prefer-numeric-literals": "warn",    //disallow `parseInt()` and `Number.parseInt()` in favor of binary,octal,and hexadecimal literals",
        "prefer-promise-reject-errors": "warn",    //require using Error objects as Promise rejection reasons",
        "prefer-regex-literals": "warn",    //disallow use of the `RegExp` constructor in favor of regular expression literals",
        "prefer-template": "warn",    //require template literals instead of string concatenation",
        "require-atomic-updates": "warn",    //disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
        "require-await": "off",    //disallow async functions which have no `await` expression",
        "require-yield": "warn",    //require generator functions to contain `yield`",
        "rest-spread-spacing": "warn",    //enforce spacing between rest and spread operators and their expressions",
        "strict": "warn",    //strict",
        "symbol-description": "warn",    //require symbol descriptions",
        "template-curly-spacing": "warn",    //require or disallow spacing around embedded expressions of template strings",
        "use-isnan": "warn",    //require calls to `isNaN()` when checking for `NaN`",
        "valid-typeof": "warn",    //enforce comparing `typeof` expressions against valid strings",
        "wrap-iife": "warn",    //require parentheses around immediate `function` invocations",
        "yoda": "warn",    //require or disallow &amp;quot;Yoda&amp;quot; conditions"

        "react/display-name": "off",
        "react/no-children-prop": "warn",
        "react/no-danger-with-children": "warn",
        "react/no-deprecated": "warn",
        "react/no-direct-mutation-state": "warn",
        "react/no-find-dom-node": "warn",
        "react/no-is-mounted": "warn",
        "react/no-render-return-value": "warn",
        "react/no-string-refs": "warn",
        "react/no-unescaped-entities": "warn",
        "react/no-unknown-property": "warn",
        "react/react-in-jsx-scope": "warn",
        "react/require-render-return": "warn",
        "react/prop-types": "off",
        "react/jsx-key": "warn",
        "react/jsx-no-comment-textnodes": "warn",
        "react/jsx-no-duplicate-props": "warn",
        "react/jsx-no-target-blank": "warn",
        "react/jsx-no-undef": "warn",
        "react/jsx-uses-react": "warn",
        "react/jsx-uses-vars": "warn",

        "react-hooks/rules-of-hooks": "warn",
        "react-hooks/exhaustive-deps": "warn",

        "prettier/prettier": "warn"
    }
}

